{"version":3,"sources":["images/robert-katzki.jpg","API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","components/AnswersSummary.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","console","log","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","StyledWrapper","StyledAnswerSummary","AnswersSummary","userAnswers","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","setUserAnswers","score","setScore","gameOver","setGameOver","startQuiz","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,2C,+ECE/BC,E,wFAAAA,K,YAAAA,E,gBAAAA,E,aAAAA,M,KAiBL,IAAMC,EAAkB,uCAAG,WAChCC,EACAC,GAFgC,iBAAAC,EAAA,6DAI1BC,EAJ0B,6CAIuBH,EAJvB,uBAI4CC,EAJ5C,2BAKNG,MAAMD,GALA,8BAKWE,OALX,cAK1BC,EAL0B,OAMhCC,QAAQC,IAAIF,GANoB,kBAQzBA,EAAKG,QAAQC,KAAI,SAACC,GAAD,mBAAC,eACpBA,GADmB,IAEtBC,SC7ByBC,ED6BH,GAAD,mBAChBF,EAASG,mBADO,CAEnBH,EAASI,iBC9Bb,YAAIF,GAAOG,MAAK,kBAAMC,KAAKC,SAAW,SADZ,IAACL,MDmBK,2CAAH,wD,0yBEjBxB,IAAMM,EAAUC,IAAOC,IAAV,KAoBPC,EAAgBF,IAAOC,IAAV,KAaR,gBAAGE,EAAH,EAAGA,QAASC,EAAZ,EAAYA,YAAZ,OACZD,EACI,0CACCA,GAAWC,EACZ,yCACA,4CCYKC,EAvCuB,SAAC,GAOhC,IANLd,EAMI,EANJA,SACAC,EAKI,EALJA,QACAc,EAII,EAJJA,SACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,eACAC,EACI,EADJA,eAEA,OACE,kBAACV,EAAD,KACE,uBAAGW,UAAU,UAAb,aACaF,EADb,MACgCC,GAEhC,uBACEE,wBAAyB,CACvBC,OAAQrB,KAGZ,6BACGC,EAAQF,KAAI,SAACuB,GAAD,OACX,kBAACX,EAAD,CACEY,IAAKD,EACLV,SAAmB,OAAVI,QAAU,IAAVA,OAAA,EAAAA,EAAYQ,iBAAkBF,EACvCT,aAAuB,OAAVG,QAAU,IAAVA,OAAA,EAAAA,EAAYM,UAAWA,GAEpC,4BACEG,WAAUT,EACVU,MAAOJ,EACPK,QAASZ,GAET,0BAAMK,wBAAyB,CAAEC,OAAQC,a,oaCvCvD,IAAMM,EAAgBnB,IAAOC,IAAV,KAebmB,EAAsBpB,IAAOC,IAAV,KAEP,qBAAGE,QAEX,yCACA,4CA6BKkB,EArByB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACzC,OACE,gBAACH,EAAD,KACE,sDACCG,EAAYhC,KAAI,gBAAGC,EAAH,EAAGA,SAAUsB,EAAb,EAAaA,OAAQE,EAArB,EAAqBA,cAAeZ,EAApC,EAAoCA,QAApC,OACf,gBAACiB,EAAD,CAAqBN,IAAKvB,EAAUY,QAASA,GAC3C,qBACEQ,wBAAyB,CACvBC,OAAQrB,KAGZ,yCAAiBsB,GACjB,4CAAoBE,GACpB,qBAAGL,UAAU,eAAeP,EAAO,yBACnC,iC,4vCC1CH,IAAMoB,EAAcC,YAAH,IAMQC,KAgBnB1B,EAAUC,IAAOC,IAAV,KC2FLyB,EAnGH,WAAO,IAAD,EACcC,oBAAS,GADvB,mBACTC,EADS,KACAC,EADA,OAEkBF,mBAA0B,IAF5C,mBAETG,EAFS,KAEEC,EAFF,OAGYJ,mBAAS,GAHrB,mBAGTK,EAHS,KAGDC,EAHC,OAIsBN,mBAAyB,IAJ/C,mBAITL,EAJS,KAIIY,EAJJ,OAKUP,mBAAS,GALnB,mBAKTQ,EALS,KAKFC,EALE,OAMgBT,oBAAS,GANzB,mBAMTU,EANS,KAMCC,EAND,KAQVC,EAAS,uCAAG,4BAAAzD,EAAA,6DAChB+C,GAAW,GACXS,GAAY,GAFI,SAIW3D,EAdP,GAgBlBD,EAAW8D,MANG,OAIVC,EAJU,OAShBV,EAAaU,GACbL,EAAS,GACTF,EAAe,IACfD,EAAU,GAEVJ,GAAW,GAdK,4CAAH,qDA2Cf,OAFA1C,QAAQC,IAAIkC,GAGV,oCACE,kBAACC,EAAD,MACA,kBAAC,EAAD,KACGD,EAAYoB,OAAS,GACpB,oCACE,8CACCL,GA5DW,KA4DCf,EAAYoB,OACvB,4BAAQhC,UAAU,QAAQQ,QAASqB,GAAnC,SAGE,KAEFF,EAAqD,KAA1C,uBAAG3B,UAAU,SAAb,UAA6ByB,GACzCP,GAAW,oDACVA,IAAYS,GACZ,kBAAC,EAAD,CACE7B,eAAgBwB,EAAS,EACzBvB,eAvEQ,GAwERlB,SAAUuC,EAAUE,GAAQzC,SAC5BC,QAASsC,EAAUE,GAAQxC,QAC3Be,WAAYe,EAAcA,EAAYU,QAAUW,EAChDrC,SAhDM,SAACsC,GACnB,IAAKP,EAAU,CACb,IAAMxB,EAAS+B,EAAEC,cAAc5B,MACzBd,EAAU2B,EAAUE,GAAQrC,iBAAmBkB,EACjDV,GAASiC,GAAS,SAACU,GAAD,OAAUA,EAAO,KACvC,IAAMC,EAAe,CACnBxD,SAAUuC,EAAUE,GAAQzC,SAC5BsB,SACAV,UACAY,cAAee,EAAUE,GAAQrC,gBAEnCuC,GAAe,SAACY,GAAD,4BAAcA,GAAd,CAAoBC,WAyC3BV,GACDT,GACDN,EAAYoB,SAAWV,EAAS,GACrBgB,IAAXhB,EAII,KAHF,4BAAQtB,UAAU,OAAOQ,QAzChB,WACnB,IAAM+B,EAAejB,EAAS,EA3CV,KA4ChBiB,EACFX,GAAY,GAEZL,EAAUgB,KAoCF,SAMJ,oCACE,kBAAC,EAAD,CAAgB3B,YAAaA,IAC7B,4BAAQZ,UAAU,QAAQQ,QAASqB,GAAnC,uBCvGZW,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.0def6178.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/robert-katzki.fbfcd3be.jpg\";","import { shuffleArray } from './utils';\r\n\r\nexport enum Difficulty {\r\n  EASY = 'easy',\r\n  MEDIUM = 'medium',\r\n  HARD = 'hard',\r\n}\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport const fetchQuizQuestions = async (\r\n  amount: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  console.log(data);\r\n\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer,\r\n    ]),\r\n  }));\r\n};\r\n","export const shuffleArray = (array: any[]) =>\r\n  [...array].sort(() => Math.random() - 0.5);\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  width: 100%;\r\n  max-width: 1200px;\r\n  background: #d0fff9;\r\n  border-radius: 10px;\r\n  border: 3px solid #1f4261;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n\r\n  p {\r\n    font-size: 1.1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.9rem;\r\n    width: 100%;\r\n    margin: 5px 0;\r\n    height: 40px;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? 'linear-gradient(90deg,#3FBC9B,#596418)'\r\n        : !correct && userClicked\r\n        ? 'linear-gradient(90deg,#ac331d,#cf0909)'\r\n        : 'linear-gradient(90deg,#1F4261,#6EAFD3)'};\r\n    border: 4px solid #eee;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #ffffff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { AnswerObject } from '../App';\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNumber: number;\r\n  totalQuestions: number;\r\n};\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNumber,\r\n  totalQuestions,\r\n}) => {\r\n  return (\r\n    <Wrapper>\r\n      <p className=\"number\">\r\n        Question: {questionNumber} / {totalQuestions}\r\n      </p>\r\n      <p\r\n        dangerouslySetInnerHTML={{\r\n          __html: question,\r\n        }}\r\n      />\r\n      <div>\r\n        {answers.map((answer) => (\r\n          <ButtonWrapper\r\n            key={answer}\r\n            correct={userAnswer?.correctAnswer === answer}\r\n            userClicked={userAnswer?.answer === answer}\r\n          >\r\n            <button\r\n              disabled={userAnswer ? true : false}\r\n              value={answer}\r\n              onClick={callback}\r\n            >\r\n              <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n            </button>\r\n          </ButtonWrapper>\r\n        ))}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default QuestionCard;\r\n","import * as React from 'react';\r\nimport { AnswerObject } from '../App';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledWrapper = styled.div`\r\n  margin: 50px 0 10px;\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n`;\r\n\r\ntype StyledAnswerSummaryProps = {\r\n  correct: boolean;\r\n};\r\n\r\nconst StyledAnswerSummary = styled.div<StyledAnswerSummaryProps>`\r\n  .correctness {\r\n    background: ${({ correct }) =>\r\n      correct\r\n        ? 'linear-gradient(90deg,#3FBC9B,#596418)'\r\n        : 'linear-gradient(90deg,#FF5637,#C1581B)'};\r\n    color: white;\r\n  }\r\n`;\r\n\r\ntype Props = {\r\n  userAnswers: AnswerObject[];\r\n};\r\nconst AnswersSummary: React.FC<Props> = ({ userAnswers }) => {\r\n  return (\r\n    <StyledWrapper>\r\n      <h2>Summary of your answers.</h2>\r\n      {userAnswers.map(({ question, answer, correctAnswer, correct }) => (\r\n        <StyledAnswerSummary key={question} correct={correct}>\r\n          <p\r\n            dangerouslySetInnerHTML={{\r\n              __html: question,\r\n            }}\r\n          />\r\n          <p>Your answer: {answer}</p>\r\n          <p>Correct answer: {correctAnswer}</p>\r\n          <p className=\"correctness\">{correct ? `Correct!` : `Incorrect!`}</p>\r\n          <br />\r\n        </StyledAnswerSummary>\r\n      ))}\r\n    </StyledWrapper>\r\n  );\r\n};\r\n\r\nexport default AnswersSummary;\r\n","import styled, { createGlobalStyle } from 'styled-components';\r\n// @ts-ignore\r\nimport BGImage from './images/robert-katzki.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        height: 100%;\r\n    }\r\n\r\n    body {\r\n        background-image: url(${BGImage});\r\n        background-size: cover;\r\n        background-attachment: fixed;\r\n        background-repeat: no-repeat;\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n\r\n    * {\r\n        box-sizing: border-box;\r\n        font-family: 'Catamaran', sans-serif;\r\n    }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  .score {\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n\r\n  h1 {\r\n    font-family: 'Fascinate Inline', sans-serif;\r\n    background-size: 100%;\r\n    filter: drop-shadow(2px 2px #ebfeff);\r\n    font-size: 50px;\r\n    text-align: center;\r\n    margin: 20px;\r\n    @media (min-width: 900px) {\r\n      font-size: 70px;\r\n    }\r\n  }\r\n\r\n  .start,\r\n  .next {\r\n    cursor: pointer;\r\n    background: #d0fff9;\r\n    border: 2px solid #1f4261;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n    font-size: 1rem;\r\n  }\r\n\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API';\nimport { QuestionState, Difficulty } from './API';\nimport QuestionCard from './components/QuestionCard';\nimport AnswersSummary from './components/AnswersSummary';\n\n// styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startQuiz = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if (correct) setScore((prev) => prev + 1);\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  console.log(userAnswers);\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        {userAnswers.length < 10 ? (\n          <>\n            <h1>Evergreen Quiz</h1>\n            {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n              <button className=\"start\" onClick={startQuiz}>\n                Start\n              </button>\n            ) : null}\n\n            {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n            {loading && <p>Loading Questions...</p>}\n            {!loading && !gameOver && (\n              <QuestionCard\n                questionNumber={number + 1}\n                totalQuestions={TOTAL_QUESTIONS}\n                question={questions[number].question}\n                answers={questions[number].answers}\n                userAnswer={userAnswers ? userAnswers[number] : undefined}\n                callback={checkAnswer}\n              />\n            )}\n\n            {!gameOver &&\n            !loading &&\n            userAnswers.length === number + 1 &&\n            number !== TOTAL_QUESTIONS - 1 ? (\n              <button className=\"next\" onClick={nextQuestion}>\n                Next\n              </button>\n            ) : null}\n          </>\n        ) : (\n          <>\n            <AnswersSummary userAnswers={userAnswers} />\n            <button className=\"start\" onClick={startQuiz}>\n              Take quiz again\n            </button>\n          </>\n        )}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}